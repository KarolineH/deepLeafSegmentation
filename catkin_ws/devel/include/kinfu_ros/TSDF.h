// Generated by gencpp from file kinfu_ros/TSDF.msg
// DO NOT EDIT!


#ifndef KINFU_ROS_MESSAGE_TSDF_H
#define KINFU_ROS_MESSAGE_TSDF_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>

namespace kinfu_ros
{
template <class ContainerAllocator>
struct TSDF_
{
  typedef TSDF_<ContainerAllocator> Type;

  TSDF_()
    : header()
    , size_x(0.0)
    , size_y(0.0)
    , size_z(0.0)
    , num_voxels_x(0)
    , num_voxels_y(0)
    , num_voxels_z(0)
    , truncation_dist(0.0)
    , max_weight(0)
    , pose()
    , data()  {
    }
  TSDF_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , size_x(0.0)
    , size_y(0.0)
    , size_z(0.0)
    , num_voxels_x(0)
    , num_voxels_y(0)
    , num_voxels_z(0)
    , truncation_dist(0.0)
    , max_weight(0)
    , pose(_alloc)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _size_x_type;
  _size_x_type size_x;

   typedef float _size_y_type;
  _size_y_type size_y;

   typedef float _size_z_type;
  _size_z_type size_z;

   typedef int32_t _num_voxels_x_type;
  _num_voxels_x_type num_voxels_x;

   typedef int32_t _num_voxels_y_type;
  _num_voxels_y_type num_voxels_y;

   typedef int32_t _num_voxels_z_type;
  _num_voxels_z_type num_voxels_z;

   typedef float _truncation_dist_type;
  _truncation_dist_type truncation_dist;

   typedef int32_t _max_weight_type;
  _max_weight_type max_weight;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::kinfu_ros::TSDF_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kinfu_ros::TSDF_<ContainerAllocator> const> ConstPtr;

}; // struct TSDF_

typedef ::kinfu_ros::TSDF_<std::allocator<void> > TSDF;

typedef boost::shared_ptr< ::kinfu_ros::TSDF > TSDFPtr;
typedef boost::shared_ptr< ::kinfu_ros::TSDF const> TSDFConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kinfu_ros::TSDF_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kinfu_ros::TSDF_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace kinfu_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'kinfu_ros': ['/home/karo/Desktop/DeepLeaveSegmentation/catkin_ws/src/kinfu_ros-master/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::kinfu_ros::TSDF_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kinfu_ros::TSDF_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kinfu_ros::TSDF_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kinfu_ros::TSDF_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kinfu_ros::TSDF_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kinfu_ros::TSDF_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kinfu_ros::TSDF_<ContainerAllocator> >
{
  static const char* value()
  {
    return "36b8bc6c23079034a0c8fa5f89593482";
  }

  static const char* value(const ::kinfu_ros::TSDF_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x36b8bc6c23079034ULL;
  static const uint64_t static_value2 = 0xa0c8fa5f89593482ULL;
};

template<class ContainerAllocator>
struct DataType< ::kinfu_ros::TSDF_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kinfu_ros/TSDF";
  }

  static const char* value(const ::kinfu_ros::TSDF_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kinfu_ros::TSDF_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
#Volume dimension, in meters\n\
float32 size_x\n\
float32 size_y\n\
float32 size_z\n\
\n\
#number of voxels in each dimension\n\
int32 num_voxels_x\n\
int32 num_voxels_y\n\
int32 num_voxels_z\n\
\n\
#Truncation distance, in meters\n\
float32 truncation_dist\n\
\n\
#Maximum tsdf weight\n\
int32 max_weight\n\
\n\
#Pose of the TSDF with respect to the camera origin\n\
geometry_msgs/Pose pose\n\
\n\
#Binary serialization of distances/weights. \n\
# The first 16 bits are a half-precision floating point value representing the TSDF. The second 16 bits are\n\
# an unsigned 16 bit weight value.\n\
uint32[] data\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::kinfu_ros::TSDF_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kinfu_ros::TSDF_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.size_x);
      stream.next(m.size_y);
      stream.next(m.size_z);
      stream.next(m.num_voxels_x);
      stream.next(m.num_voxels_y);
      stream.next(m.num_voxels_z);
      stream.next(m.truncation_dist);
      stream.next(m.max_weight);
      stream.next(m.pose);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TSDF_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kinfu_ros::TSDF_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kinfu_ros::TSDF_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "size_x: ";
    Printer<float>::stream(s, indent + "  ", v.size_x);
    s << indent << "size_y: ";
    Printer<float>::stream(s, indent + "  ", v.size_y);
    s << indent << "size_z: ";
    Printer<float>::stream(s, indent + "  ", v.size_z);
    s << indent << "num_voxels_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_voxels_x);
    s << indent << "num_voxels_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_voxels_y);
    s << indent << "num_voxels_z: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_voxels_z);
    s << indent << "truncation_dist: ";
    Printer<float>::stream(s, indent + "  ", v.truncation_dist);
    s << indent << "max_weight: ";
    Printer<int32_t>::stream(s, indent + "  ", v.max_weight);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KINFU_ROS_MESSAGE_TSDF_H
